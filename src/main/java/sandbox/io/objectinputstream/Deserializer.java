package sandbox.io.objectinputstream;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectStreamClass;

/*
* ‚úÖ Explanation of used methods:
    readObject() ‚Äî restores object from file.
    available() ‚Äî shows bytes that can be read (only an estimate, not exact!).
    close() ‚Äî releases resources.
    readUnshared() ‚Äî not used here fully because it‚Äôs meaningful when multiple objects are serialized.
* */
public class Deserializer {

    public static Object loadObject(String filename) {
        try (CustomObjectInputStream ois = new CustomObjectInputStream(new FileInputStream(filename))) {
            System.out.println("üîÑ Available bytes: " + ois.available());

            Object obj = ois.readObject(); // Deserialize object ‚Äî internally uses resolveClass()
            System.out.println("‚úÖ Object loaded successfully from " + filename);

            return obj;

        } catch (IOException | ClassNotFoundException e) {
            System.err.println("‚ùå Error loading object: " + e.getMessage());
            e.printStackTrace();
            return null;
        }
    }

    // Example for closing stream
    public static void closeStream(ObjectInputStream ois) {
        try {
            if (ois != null) {
                ois.close(); // Always close streams
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
